// Service Worker for AilesTravel PWA
const CACHE_NAME = 'ailestravel-v1'
const STATIC_CACHE = 'ailestravel-static-v1'
const DYNAMIC_CACHE = 'ailestravel-dynamic-v1'

// Static assets to cache
const STATIC_ASSETS = [
  '/',
  '/search',
  '/dashboard',
  '/offline',
  '/manifest.json',
  // Add critical CSS and JS files
  // These will be auto-generated by Next.js build
]

// API routes to cache
const API_CACHE_PATTERNS = [
  /^\/api\/programs/,
  /^\/api\/ai\/recommendations/,
]

// Install event - cache static assets
self.addEventListener('install', (event) => {
  console.log('Service Worker: Installing...')
  
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('Service Worker: Caching static assets')
        return cache.addAll(STATIC_ASSETS)
      })
      .then(() => {
        console.log('Service Worker: Skip waiting')
        self.skipWaiting()
      })
  )
})

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('Service Worker: Activating...')
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('Service Worker: Deleting old cache', cacheName)
              return caches.delete(cacheName)
            }
          })
        )
      })
      .then(() => {
        console.log('Service Worker: Claiming clients')
        self.clients.claim()
      })
  )
})

// Fetch event - implement caching strategies
self.addEventListener('fetch', (event) => {
  const { request } = event
  const url = new URL(request.url)

  // Skip cross-origin requests
  if (url.origin !== self.origin) {
    return
  }

  // Handle navigation requests (pages)
  if (request.mode === 'navigate') {
    event.respondWith(
      caches.match(request)
        .then((response) => {
          if (response) {
            // Serve from cache
            return response
          }
          
          // Fallback to network
          return fetch(request)
            .then((response) => {
              // Cache successful responses
              if (response.status === 200) {
                const responseClone = response.clone()
                caches.open(DYNAMIC_CACHE)
                  .then((cache) => {
                    cache.put(request, responseClone)
                  })
              }
              return response
            })
            .catch(() => {
              // Show offline page if available
              return caches.match('/offline') || 
                     new Response('Offline - Please check your connection', {
                       status: 503,
                       statusText: 'Service Unavailable'
                     })
            })
        })
    )
    return
  }

  // Handle API requests
  if (url.pathname.startsWith('/api/')) {
    // Cache-first strategy for certain API endpoints
    if (API_CACHE_PATTERNS.some(pattern => pattern.test(url.pathname))) {
      event.respondWith(
        caches.match(request)
          .then((response) => {
            if (response) {
              // Serve from cache and update in background
              fetch(request)
                .then((networkResponse) => {
                  if (networkResponse.status === 200) {
                    caches.open(DYNAMIC_CACHE)
                      .then((cache) => {
                        cache.put(request, networkResponse.clone())
                      })
                  }
                })
                .catch(() => {}) // Ignore network errors
              
              return response
            }
            
            // Not in cache, fetch from network
            return fetch(request)
              .then((response) => {
                if (response.status === 200) {
                  const responseClone = response.clone()
                  caches.open(DYNAMIC_CACHE)
                    .then((cache) => {
                      cache.put(request, responseClone)
                    })
                }
                return response
              })
          })
      )
      return
    }
    
    // Network-first strategy for other API endpoints
    event.respondWith(
      fetch(request)
        .then((response) => {
          if (response.status === 200) {
            const responseClone = response.clone()
            caches.open(DYNAMIC_CACHE)
              .then((cache) => {
                cache.put(request, responseClone)
              })
          }
          return response
        })
        .catch(() => {
          return caches.match(request) || 
                 new Response(JSON.stringify({ error: 'Offline' }), {
                   status: 503,
                   headers: { 'Content-Type': 'application/json' }
                 })
        })
    )
    return
  }

  // Handle static assets (images, CSS, JS)
  if (request.destination === 'image' || 
      request.destination === 'style' || 
      request.destination === 'script') {
    
    event.respondWith(
      caches.match(request)
        .then((response) => {
          if (response) {
            return response
          }
          
          return fetch(request)
            .then((response) => {
              if (response.status === 200) {
                const responseClone = response.clone()
                caches.open(STATIC_CACHE)
                  .then((cache) => {
                    cache.put(request, responseClone)
                  })
              }
              return response
            })
        })
    )
    return
  }

  // Default: network first
  event.respondWith(
    fetch(request)
      .catch(() => {
        return caches.match(request)
      })
  )
})

// Handle background sync
self.addEventListener('sync', (event) => {
  console.log('Service Worker: Background sync', event.tag)
  
  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync())
  }
})

// Handle push notifications
self.addEventListener('push', (event) => {
  console.log('Service Worker: Push received')
  
  if (event.data) {
    const data = event.data.json()
    
    const options = {
      body: data.body || 'New update available',
      icon: '/icons/icon-192x192.png',
      badge: '/icons/badge-72x72.png',
      vibrate: [100, 50, 100],
      data: data.data || {},
      actions: [
        {
          action: 'view',
          title: 'View',
          icon: '/icons/view-24x24.png'
        },
        {
          action: 'dismiss',
          title: 'Dismiss',
          icon: '/icons/dismiss-24x24.png'
        }
      ]
    }
    
    event.waitUntil(
      self.registration.showNotification(data.title || 'AilesTravel', options)
    )
  }
})

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  console.log('Service Worker: Notification clicked')
  
  event.notification.close()
  
  if (event.action === 'view') {
    const url = event.notification.data.url || '/'
    event.waitUntil(
      clients.openWindow(url)
    )
  }
})

// Background sync function
async function doBackgroundSync() {
  try {
    // Sync offline data, update caches, etc.
    console.log('Service Worker: Performing background sync')
    
    // Example: sync offline form submissions
    const offlineRequests = await getOfflineRequests()
    
    for (const request of offlineRequests) {
      try {
        await fetch(request.url, request.options)
        await removeOfflineRequest(request.id)
      } catch (error) {
        console.log('Background sync failed for request:', request.id)
      }
    }
  } catch (error) {
    console.error('Background sync error:', error)
  }
}

// Helper functions for offline data management
async function getOfflineRequests() {
  // Implementation depends on your offline storage strategy
  return []
}

async function removeOfflineRequest(id) {
  // Implementation depends on your offline storage strategy
  console.log('Removing offline request:', id)
}
